use std::{fs::File, io::Write};

use clap::{CommandFactory, ErrorKind, Parser};
use keynergy::Layout;

/// Tool that exports a Keynergy layout.toml into Linux XKB
#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
struct Args {
    /// Path to TOML file that contains the layout to export
    #[clap(short, long)]
    layout: String,
}

fn main() {
    let args = Args::parse();
    let mut cmd = Args::command();
    let layout = Layout::load(&args.layout);
    let layout = match layout {
        Ok(l) => l,
        Err(_) => cmd
            .error(
                ErrorKind::Io,
                "Couldn't read that file. Make sure that it exists, and is a .toml layout file.",
            )
            .exit(),
    };
    let standard = match layout.formats.standard {
        Some(k) => k,
        None => cmd
        .error(
            ErrorKind::InvalidValue,
            format!("Layout {} does not have a standard format!", layout.name),
        )
        .exit(),
    };
    let mut main_keys: Vec<String> = Vec::new();
    for (y, row) in standard.matrix.iter().enumerate() {
	for (x, k) in row.iter().enumerate() {
	    let row_sign = ["AE", "AD", "AC", "AB"][y+standard.home_row as usize];
	    let key = match *k {
		';' => "semicolon".to_string(),
		'\'' => "apostrophe".to_string(),
		',' => "comma".to_string(),
		'.' => "period".to_string(),
		'/' => "slash".to_string(),
		'[' => "bracketleft".to_string(),
		']' => "bracketright".to_string(),
		_ => k.to_string(),
	    };
	    let uppercase = match *k {
		';' => "colon".to_string(),
		'\'' => "quotedbl".to_string(),
		',' => "less".to_string(),
		'.' => "greater".to_string(),
		'/' => "question".to_string(),
		'[' => "braceleft".to_string(),
		']' => "braceright".to_string(),
		_ => k.to_ascii_uppercase().to_string(),
	    };
	    main_keys.push(format!("    key <{}{:02}> {{[ {}, {} ]}};", row_sign, x+1, key, uppercase));
	}
    }
    let mut file = File::create(layout.name.replace(" ", "_").to_ascii_lowercase()).unwrap();
    write!(file, "{}", format!(
	"// Standard {} layout - created by {}
// File auto-generated by Keynergy layoutexport (github.com/keynergy/layoutexport)

default partial
xkb_symbols \"basic\" {{
    include \"us(basic)\"

    name[Group1] = \"{}\";

{}
}};", layout.name,
	layout.author,
	layout.name,
	main_keys.join("\n"),
    ));
}
